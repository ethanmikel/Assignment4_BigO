"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Kavya Chowti and Ethan Mikel, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: kc45736
UT EID 2: etm693
"""


# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n3(s):
    """
    Finds the length of the longest substring without repeating characters
    using a brute force approach (O(N^3)).

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """
    length_max = 0
    for i in range(len(s)): 
      for j in range(i, len(s)):
            freq_represent = [0] * 256
            is_valid = True 
            for k in range(i, j+1):
                element = ord(s[k])
                freq_represent[element] += 1

            if freq_represent[element] > 1:
                    is_valid = False

            if is_valid:
                length_max = max(length_max, j - i + 1)
    
    return length_max

# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n2(s):
    """
    Finds the length of the longest substring without repeating characters
    using a frequency list approach (O(N^2)), converting each character to
    their corresponding numeric representation in ASCII as the index into the
    frequency list.

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """
    length_max = 0
    for i in range(len(s)):
      freq_represent = [0] * 256
      for j in range(i, len(s)):
            element = ord(s[j])
            freq_represent[element] += 1
            
            if freq_represent[element] > 1:
                break 
            length_max = max(length_max, j - i + 1)

    return length_max

# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n(s):
    """
    Finds the length of the longest substring without repeating characters
    using a frequency list approach (O(N)), converting each character to
    their corresponding numeric representation in ASCII as the index into the
    frequency list. However, this approach stops early, breaking out of the inner
    loop when a repeating character is found. You may also choose to challenge
    yourself by implementing a sliding window approach.

    pre: s is a string of arbitrary length, possibly empty.
    post: Returns an integer >= 0 representing the length of the longest substring
          in s that contains no repeating characters.
    """
    length_max = 0
    freq_represent = [0] * 256
    start = 0

    for i in range(len(s)):
      element = ord(s[i])
      freq_represent[element] += 1

      while freq_represent[element] > 1:
            freq_represent[ord(s[start])] -= 1
            start += 1

      length_max = max(length_max, j - i + 1)

    return length_max
